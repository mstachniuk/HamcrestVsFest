package com.blogspot.mstachniuk.hamcrestvsfest;

import org.fest.assertions.api.AbstractAssert;
import org.fest.assertions.api.Assertions;

import static java.lang.String.format;


/**
 * {@link SolarSystem} specific assertions - Generated by CustomAssertionGenerator.
 */
public class SolarSystemAssert extends AbstractAssert<SolarSystemAssert, SolarSystem> {

    /**
     * Creates a new </code>{@link SolarSystemAssert}</code> to make assertions on actual SolarSystem.
     *
     * @param actual the SolarSystem we want to make assertions on.
     */
    public SolarSystemAssert(SolarSystem actual) {
        super(actual, SolarSystemAssert.class);
    }

    /**
     * An entry point for SolarSystemAssert to follow Fest standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(mySolarSystem)</code> and get specific assertion with code completion.
     *
     * @param actual the SolarSystem we want to make assertions on.
     * @return a new </code>{@link SolarSystemAssert}</code>
     */
    public static SolarSystemAssert assertThat(SolarSystem actual) {
        return new SolarSystemAssert(actual);
    }

    /**
     * Verifies that the actual SolarSystem's innerPlanets contains the given Planet elements.
     *
     * @param innerPlanets the given elements that should be contained in actual SolarSystem's innerPlanets.
     * @return this assertion object.
     * @throws AssertionError if the actual SolarSystem's innerPlanets does not contain all given Planet elements.
     */
    public SolarSystemAssert hasInnerPlanets(Planet... innerPlanets) {
        // check that actual SolarSystem we want to make assertions on is not null.
        isNotNull();

        // check that given Planet varargs is not null.
        if (innerPlanets == null) throw new AssertionError("Expecting innerPlanets parameter not to be null.");

        // check with standard error message (see commented below to set your own message).
        Assertions.assertThat(actual.getInnerPlanets()).contains(innerPlanets);

        // uncomment the 4 lines below if you want to build your own error message :
        // WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
        // String errorMessage = "my error message";
        // assertionInfo.overridingErrorMessage(errorMessage);
        // Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual SolarSystem has no innerPlanets.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual SolarSystem's innerPlanets is not empty.
     */
    public SolarSystemAssert hasNoInnerPlanets() {
        // check that actual SolarSystem we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("Expected actual <%s> not to have innerPlanets but had :\\n%s", actual, actual.getInnerPlanets());

        // check
        if (!actual.getInnerPlanets().isEmpty()) throw new AssertionError(errorMessage);

        // return the current assertion for method chaining
        return this;
    }


}
