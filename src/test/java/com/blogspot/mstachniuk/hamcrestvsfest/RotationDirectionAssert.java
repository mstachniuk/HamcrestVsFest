package com.blogspot.mstachniuk.hamcrestvsfest;

import static java.lang.String.format;

import org.fest.assertions.api.AbstractAssert;
import org.fest.assertions.api.Assertions;


/**
 * {@link RotationDirection} specific assertions - Generated by CustomAssertionGenerator.
 */
public class RotationDirectionAssert extends AbstractAssert<RotationDirectionAssert, RotationDirection> {

  /**
   * Creates a new </code>{@link RotationDirectionAssert}</code> to make assertions on actual RotationDirection.
   * @param actual the RotationDirection we want to make assertions on.
   */
  public RotationDirectionAssert(RotationDirection actual) {
    super(actual, RotationDirectionAssert.class);
  }

  /**
   * An entry point for RotationDirectionAssert to follow Fest standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myRotationDirection)</code> and get specific assertion with code completion.
   * @param actual the RotationDirection we want to make assertions on.
   * @return a new </code>{@link RotationDirectionAssert}</code>
   */
  public static RotationDirectionAssert assertThat(RotationDirection actual) {
    return new RotationDirectionAssert(actual);
  }

  /**
   * Verifies that the actual RotationDirection's declaringClass is equal to the given one.
   * @param declaringClass the given declaringClass to compare the actual RotationDirection's declaringClass to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RotationDirection's declaringClass is not equal to the given one.
   */
  public RotationDirectionAssert hasDeclaringClass(Class declaringClass) {
    // check that actual RotationDirection we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected RotationDirection's declaringClass to be <%s> but was <%s>", declaringClass, actual.getDeclaringClass());
    
    // check
    if (!actual.getDeclaringClass().equals(declaringClass)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

}
